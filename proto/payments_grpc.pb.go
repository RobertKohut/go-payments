// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: payments.proto

package payments

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PaymentService_GetPublishableKey_FullMethodName               = "/payments.PaymentService/GetPublishableKey"
	PaymentService_CreateTenant_FullMethodName                    = "/payments.PaymentService/CreateTenant"
	PaymentService_CreateCustomer_FullMethodName                  = "/payments.PaymentService/CreateCustomer"
	PaymentService_GetCustomerById_FullMethodName                 = "/payments.PaymentService/GetCustomerById"
	PaymentService_AddCustomerPaymentMethod_FullMethodName        = "/payments.PaymentService/AddCustomerPaymentMethod"
	PaymentService_RemoveCustomerPaymentMethod_FullMethodName     = "/payments.PaymentService/RemoveCustomerPaymentMethod"
	PaymentService_SetCustomerPrimaryPaymentMethod_FullMethodName = "/payments.PaymentService/SetCustomerPrimaryPaymentMethod"
	PaymentService_CreateCharge_FullMethodName                    = "/payments.PaymentService/CreateCharge"
	PaymentService_RetrieveCustomerCharges_FullMethodName         = "/payments.PaymentService/RetrieveCustomerCharges"
)

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	GetPublishableKey(ctx context.Context, in *GetPublishableKeyRequest, opts ...grpc.CallOption) (*GetPublishableKeyResponse, error)
	CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error)
	CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error)
	GetCustomerById(ctx context.Context, in *GetCustomerByIdRequest, opts ...grpc.CallOption) (*GetCustomerByIdResponse, error)
	AddCustomerPaymentMethod(ctx context.Context, in *AddCustomerPaymentMethodRequest, opts ...grpc.CallOption) (*AddCustomerPaymentMethodResponse, error)
	RemoveCustomerPaymentMethod(ctx context.Context, in *RemoveCustomerPaymentMethodRequest, opts ...grpc.CallOption) (*RemoveCustomerPaymentMethodResponse, error)
	SetCustomerPrimaryPaymentMethod(ctx context.Context, in *SetCustomerPrimaryPaymentMethodRequest, opts ...grpc.CallOption) (*SetCustomerPrimaryPaymentMethodResponse, error)
	CreateCharge(ctx context.Context, in *CreateChargeRequest, opts ...grpc.CallOption) (*CreateChargeResponse, error)
	RetrieveCustomerCharges(ctx context.Context, in *RetrieveCustomerChargesRequest, opts ...grpc.CallOption) (*RetrieveCustomerChargesResponse, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) GetPublishableKey(ctx context.Context, in *GetPublishableKeyRequest, opts ...grpc.CallOption) (*GetPublishableKeyResponse, error) {
	out := new(GetPublishableKeyResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetPublishableKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error) {
	out := new(CreateTenantResponse)
	err := c.cc.Invoke(ctx, PaymentService_CreateTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error) {
	out := new(CreateCustomerResponse)
	err := c.cc.Invoke(ctx, PaymentService_CreateCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetCustomerById(ctx context.Context, in *GetCustomerByIdRequest, opts ...grpc.CallOption) (*GetCustomerByIdResponse, error) {
	out := new(GetCustomerByIdResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetCustomerById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) AddCustomerPaymentMethod(ctx context.Context, in *AddCustomerPaymentMethodRequest, opts ...grpc.CallOption) (*AddCustomerPaymentMethodResponse, error) {
	out := new(AddCustomerPaymentMethodResponse)
	err := c.cc.Invoke(ctx, PaymentService_AddCustomerPaymentMethod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) RemoveCustomerPaymentMethod(ctx context.Context, in *RemoveCustomerPaymentMethodRequest, opts ...grpc.CallOption) (*RemoveCustomerPaymentMethodResponse, error) {
	out := new(RemoveCustomerPaymentMethodResponse)
	err := c.cc.Invoke(ctx, PaymentService_RemoveCustomerPaymentMethod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) SetCustomerPrimaryPaymentMethod(ctx context.Context, in *SetCustomerPrimaryPaymentMethodRequest, opts ...grpc.CallOption) (*SetCustomerPrimaryPaymentMethodResponse, error) {
	out := new(SetCustomerPrimaryPaymentMethodResponse)
	err := c.cc.Invoke(ctx, PaymentService_SetCustomerPrimaryPaymentMethod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreateCharge(ctx context.Context, in *CreateChargeRequest, opts ...grpc.CallOption) (*CreateChargeResponse, error) {
	out := new(CreateChargeResponse)
	err := c.cc.Invoke(ctx, PaymentService_CreateCharge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) RetrieveCustomerCharges(ctx context.Context, in *RetrieveCustomerChargesRequest, opts ...grpc.CallOption) (*RetrieveCustomerChargesResponse, error) {
	out := new(RetrieveCustomerChargesResponse)
	err := c.cc.Invoke(ctx, PaymentService_RetrieveCustomerCharges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility
type PaymentServiceServer interface {
	GetPublishableKey(context.Context, *GetPublishableKeyRequest) (*GetPublishableKeyResponse, error)
	CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantResponse, error)
	CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error)
	GetCustomerById(context.Context, *GetCustomerByIdRequest) (*GetCustomerByIdResponse, error)
	AddCustomerPaymentMethod(context.Context, *AddCustomerPaymentMethodRequest) (*AddCustomerPaymentMethodResponse, error)
	RemoveCustomerPaymentMethod(context.Context, *RemoveCustomerPaymentMethodRequest) (*RemoveCustomerPaymentMethodResponse, error)
	SetCustomerPrimaryPaymentMethod(context.Context, *SetCustomerPrimaryPaymentMethodRequest) (*SetCustomerPrimaryPaymentMethodResponse, error)
	CreateCharge(context.Context, *CreateChargeRequest) (*CreateChargeResponse, error)
	RetrieveCustomerCharges(context.Context, *RetrieveCustomerChargesRequest) (*RetrieveCustomerChargesResponse, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentServiceServer struct {
}

func (UnimplementedPaymentServiceServer) GetPublishableKey(context.Context, *GetPublishableKeyRequest) (*GetPublishableKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishableKey not implemented")
}
func (UnimplementedPaymentServiceServer) CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (UnimplementedPaymentServiceServer) CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedPaymentServiceServer) GetCustomerById(context.Context, *GetCustomerByIdRequest) (*GetCustomerByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerById not implemented")
}
func (UnimplementedPaymentServiceServer) AddCustomerPaymentMethod(context.Context, *AddCustomerPaymentMethodRequest) (*AddCustomerPaymentMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomerPaymentMethod not implemented")
}
func (UnimplementedPaymentServiceServer) RemoveCustomerPaymentMethod(context.Context, *RemoveCustomerPaymentMethodRequest) (*RemoveCustomerPaymentMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCustomerPaymentMethod not implemented")
}
func (UnimplementedPaymentServiceServer) SetCustomerPrimaryPaymentMethod(context.Context, *SetCustomerPrimaryPaymentMethodRequest) (*SetCustomerPrimaryPaymentMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCustomerPrimaryPaymentMethod not implemented")
}
func (UnimplementedPaymentServiceServer) CreateCharge(context.Context, *CreateChargeRequest) (*CreateChargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCharge not implemented")
}
func (UnimplementedPaymentServiceServer) RetrieveCustomerCharges(context.Context, *RetrieveCustomerChargesRequest) (*RetrieveCustomerChargesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveCustomerCharges not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_GetPublishableKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublishableKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPublishableKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetPublishableKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPublishableKey(ctx, req.(*GetPublishableKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CreateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreateTenant(ctx, req.(*CreateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CreateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreateCustomer(ctx, req.(*CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetCustomerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetCustomerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetCustomerById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetCustomerById(ctx, req.(*GetCustomerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_AddCustomerPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomerPaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).AddCustomerPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_AddCustomerPaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).AddCustomerPaymentMethod(ctx, req.(*AddCustomerPaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_RemoveCustomerPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCustomerPaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).RemoveCustomerPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_RemoveCustomerPaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).RemoveCustomerPaymentMethod(ctx, req.(*RemoveCustomerPaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_SetCustomerPrimaryPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCustomerPrimaryPaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).SetCustomerPrimaryPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_SetCustomerPrimaryPaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).SetCustomerPrimaryPaymentMethod(ctx, req.(*SetCustomerPrimaryPaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreateCharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreateCharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CreateCharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreateCharge(ctx, req.(*CreateChargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_RetrieveCustomerCharges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveCustomerChargesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).RetrieveCustomerCharges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_RetrieveCustomerCharges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).RetrieveCustomerCharges(ctx, req.(*RetrieveCustomerChargesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payments.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublishableKey",
			Handler:    _PaymentService_GetPublishableKey_Handler,
		},
		{
			MethodName: "CreateTenant",
			Handler:    _PaymentService_CreateTenant_Handler,
		},
		{
			MethodName: "CreateCustomer",
			Handler:    _PaymentService_CreateCustomer_Handler,
		},
		{
			MethodName: "GetCustomerById",
			Handler:    _PaymentService_GetCustomerById_Handler,
		},
		{
			MethodName: "AddCustomerPaymentMethod",
			Handler:    _PaymentService_AddCustomerPaymentMethod_Handler,
		},
		{
			MethodName: "RemoveCustomerPaymentMethod",
			Handler:    _PaymentService_RemoveCustomerPaymentMethod_Handler,
		},
		{
			MethodName: "SetCustomerPrimaryPaymentMethod",
			Handler:    _PaymentService_SetCustomerPrimaryPaymentMethod_Handler,
		},
		{
			MethodName: "CreateCharge",
			Handler:    _PaymentService_CreateCharge_Handler,
		},
		{
			MethodName: "RetrieveCustomerCharges",
			Handler:    _PaymentService_RetrieveCustomerCharges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payments.proto",
}
